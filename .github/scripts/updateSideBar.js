const fs = require('fs');
const path = require('path');

// Path to the sidebars.js file
const sidebarsPath = path.resolve(__dirname, '../../docusaurus-site/sidebars.ts');

// Read the sidebars.js file
let sidebarsContent = fs.readFileSync(sidebarsPath, 'utf-8');

// Function to add the OpenAPI link for the specific project
function addOpenApiLink(projectName) {
  console.log('projectName', projectName);

  const openApiLink = `
    {
      type: 'link',
      label: 'API Documentation',
      href: '/${projectName}-api/',
    }
  `;

  // Check if the category already exists
  const categoryExists = sidebarsContent.includes(`label: '${projectName}'`);

  if (categoryExists) {
    console.log(`Category ${projectName} already exists.`);
    // Ensure the OpenAPI link is not already present
    const categoryRegex = new RegExp(`(label: '${projectName}',\\s*items: \\[)([^]*?)(\\])`);
    if (!sidebarsContent.includes(openApiLink.trim())) {
      sidebarsContent = sidebarsContent.replace(
        categoryRegex,
        (match, p1, p2, p3) => `${p1}${p2.trim()},${openApiLink}${p3}`
      );
    }
  } else {
    console.log(`Category ${projectName} does not exist, creating it.`);
    // If the category doesn't exist, create it
    const newCategory = `
    {
      type: 'category',
      label: '${projectName}',
      items: [
        {
          type: 'autogenerated',
          dirName: '${projectName}',
        },
        ${openApiLink}
      ],
    }`;

    // Add the new category to the sidebar, ensuring no duplicates
    sidebarsContent = sidebarsContent.replace(
      /(documentationSidebar: \[)([^]*?)(\])/,
      (match, p1, p2, p3) => `${p1}${p2.trim()},${newCategory}${p3}`
    );
  }

  console.log(`Updated content:\n${sidebarsContent}`);

  // Write the updated content back to sidebars.js
  fs.writeFileSync(sidebarsPath, sidebarsContent);
}

// Example usage: Add a link for the triggered project
const triggeredProjectName = process.argv[2]; // Pass project name as argument
addOpenApiLink(triggeredProjectName);
